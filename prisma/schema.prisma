// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  passwordHash  String?
  emailVerified Boolean       @default(false)
  provider      AuthProvider  @default(LOCAL)
  providerId    String?       @unique
  displayName   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  verificationTokens VerificationToken[]
  refreshTokens      RefreshToken[]
  resetTokens        PasswordResetToken[]
}

model VerificationToken {
  id                String    @id @default(uuid())
  userId            String
  verificationToken String
  expiresAt         DateTime
  usedAt            DateTime?
  createdAt         DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id           String    @id @default(uuid())
  userId       String
  refreshToken String
  expiresAt    DateTime
  revokedAt    DateTime?
  replacedById String? // this points to the new refresh token
  createdAt    DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id          String    @id @default(uuid())
  userId      String
  resetToken  String
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Space {
  id        String   @id @default(uuid()) @db.Uuid
  slug      String   @unique @db.VarChar(255)
  name      String   @db.VarChar(255)
  ownerId   String   @db.Uuid

  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logo      SpaceLogo?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SpaceLogo {
  id          String  @id @default(uuid()) @db.Uuid
  spaceId     String  @unique @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
