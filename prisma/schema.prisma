// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum FileStatus {
  PROCESSING @map("processing")
  SUCCESS    @map("available")
  FAILED     @map("failed")
}

enum ConversationRole {
  USER
  ASSISTANT
}

enum SpaceRole {
  VIEWER  @map("viewer")
  EDITOR  @map("editor")
  MANAGER @map("manager")
  OWNER   @map("owner")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  passwordHash  String?
  emailVerified Boolean      @default(false)
  provider      AuthProvider @default(LOCAL)
  providerId    String?      @unique
  displayName   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  verificationTokens VerificationToken[]
  resetTokens        PasswordResetToken[]
  sessions           Session[]
  spaces             Space[]
  spaceMemberships   SpaceMember[]
}

model VerificationToken {
  id                String    @id @default(uuid())
  userId            String
  verificationToken String
  expiresAt         DateTime
  usedAt            DateTime?
  createdAt         DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordResetToken {
  id         String    @id @default(uuid())
  userId     String
  resetToken String
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Space {
  id            String     @id @default(uuid())
  slug          String     @unique @db.VarChar(255)
  name          String     @db.VarChar(255)
  ownerId       String
  logo          SpaceLogo?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  vectorStoreId String?    @unique @db.VarChar(255)

  files         File[]
  conversations Conversation[]
  reminders     Reminder[]
  members       SpaceMember[]

  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FileShare FileShare[]

  @@index([ownerId])
}

model SpaceMember {
  id        String    @id @default(uuid())
  spaceId   String    
  userId    String    
  role      SpaceRole @default(VIEWER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId], map: "IX_SpaceMember_spaceId_userId")
}

model SpaceLogo {
  id          String  @id @default(uuid())
  spaceId     String  @unique
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Session {
  id                String    @id @default(uuid())
  userId            String
  refreshTokenHash  String
  previousTokenHash String?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime  @default(now())
  lastUsedAt        DateTime  @default(now())
  expiresAt         DateTime
  revokedAt         DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model File {
  id            String     @id @default(uuid())
  spaceId       String
  filename      String     @db.VarChar(1024)
  mimetype      String     @db.VarChar(255)
  size          BigInt     @db.BigInt
  status        FileStatus @default(PROCESSING)
  s3Key         String     @db.VarChar(2048)
  vectorStoreId String?    @db.VarChar(255)
  openAiFileId  String?    @db.VarChar(255)
  error         String?    @db.VarChar(2000)
  note          String?    @db.VarChar(2000)
  uploadedAt    DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  Reminder Reminder[]
  shares   FileShare[]

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([spaceId, status])
  @@index([spaceId, uploadedAt])
  @@index([spaceId, openAiFileId])
}

model FileShare {
  id         String    @id @default(uuid())
  fileId     String    
  spaceId    String    
  shareToken String    @unique
  expiresAt  DateTime?
  note       String?   @db.VarChar(1024)
  createdAt  DateTime  @default(now())

  file  File  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([fileId, spaceId])
  @@index([spaceId])
}

model Conversation {
  id                   String    @id @default(uuid())
  spaceId              String
  title                String?   @db.VarChar(255)
  manuallyRenamed      Boolean   @default(false)
  autoTitleGeneratedAt DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  messages ConversationMessage[]

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId, createdAt])
}

model ConversationMessage {
  id             String           @id @default(uuid())
  conversationId String
  role           ConversationRole @default(USER)
  content        String           @db.VarChar(8000)
  references     Json?
  actions        Json?
  createdAt      DateTime         @default(now())

  reminders Reminder[]

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

model Reminder {
  id        String   @id @default(uuid())
  spaceId   String
  title     String
  note      String?
  remindAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files               File[]
  ConversationMessage ConversationMessage[]
  space               Space                 @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([spaceId, remindAt])
}
